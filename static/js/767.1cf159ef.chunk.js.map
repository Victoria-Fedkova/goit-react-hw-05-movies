{"version":3,"file":"static/js/767.1cf159ef.chunk.js","mappings":"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","sources":["components/Reviews/ReviewsList/ReviewsListItem/ReviewsListItem.jsx","components/Reviews/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","services/getMovies.js"],"sourcesContent":["const ReviewsListItem = ({ review: { author, content } }) => {\n  return (\n    <li>\n      <h2> {author}</h2>\n      <p>{content}</p>\n    </li>\n  );\n};\n\nexport default ReviewsListItem;\n","import ReviewsListItem from './ReviewsListItem/ReviewsListItem';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews &&\n        reviews.map(review => (\n          <ReviewsListItem key={review.id} review={review} />\n        ))}\n    </ul>\n  );\n};\nexport default ReviewsList;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews, getReviewsInfo } from 'services/getMovies';\nimport ReviewsList from './ReviewsList/ReviewsList';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n\n  useEffect(() => {\n    setIsloading(true);\n\n    getReviews(movieId)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        setReviews(getReviewsInfo(response.data.results));\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [movieId]);\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {reviews.length ? (\n        <ReviewsList reviews={reviews} />\n      ) : (\n        <h3>There is no reviews on this movie yet...</h3>\n      )}\n    </div>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["review","author","content","reviews","map","id","movieId","useParams","useState","setReviews","isLoading","setIsloading","useEffect","getReviews","then","response","status","Error","getReviewsInfo","data","results","catch","e","console","error","finally","Loader","length","BASE_URL","API_KEY","DEFAULT_IMG","getPopularMovie","pageNumber","axios","getMovieByQuery","query","getMoviesInfo","moviesArr","movie","title","name","w300imgUrl","poster_path","w500imgUrl","year","release_date","slice","first_air_date","getMovieById","getCastInfo","getCastInfoObj","castArr","actor","original_name","profile_path","character","log","reviewsArr","getMoviesDetails","cutGenres","genres","elem","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview"],"sourceRoot":""}