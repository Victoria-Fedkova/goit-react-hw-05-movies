{"version":3,"file":"static/js/969.f4b9a8fb.chunk.js","mappings":"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","sources":["components/Gallery/GalleryItem/GalleryItem.jsx","components/Gallery/Gallery.jsx","components/LoadMoreBtn/LoadMoreBtn.styled.jsx","components/LoadMoreBtn/LoadMoreBtn.jsx","components/pages/Movies/MoviesPage.styled.jsx","components/pages/Movies/MoviesPage.js","components/pages/NotFound/Placeholder.styled.jsx","components/pages/NotFound/Placeholder.jsx","services/getMovies.js"],"sourcesContent":["import PropTypes from 'prop-types';\nconst { Link, useLocation } = require('react-router-dom');\n\nconst GalleryItem = ({\n  movie: { title, w300imgUrl, w500imgUrl, year, id },\n}) => {\n  const location = useLocation();\n  return (\n    <li>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <img\n          srcSet={`${w300imgUrl} 300w, ${w500imgUrl} 500w`}\n          sizes={'(max-width: 767px) 300px, (min-width: 768px) 500px'}\n          src={w500imgUrl}\n          alt={title}\n          loading=\"lazy\"\n        />\n        <div>\n          <p> {title}</p>\n          <p>{year}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nGalleryItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    w300imgUrl: PropTypes.string.isRequired,\n    w500imgUrl: PropTypes.string.isRequired,\n    year: PropTypes.number.isRequired,\n  }),\n};\n\nexport default GalleryItem;\n","import GalleryItem from './GalleryItem/GalleryItem';\nimport PropTypes from 'prop-types';\n\nconst Gallery = ({ movies }) => {\n  return (\n    <ul>\n      {movies &&\n        movies.map(movie => <GalleryItem key={movie.id} movie={movie} />)}\n    </ul>\n  );\n};\n\nGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      w300imgUrl: PropTypes.string.isRequired,\n      w500imgUrl: PropTypes.string.isRequired,\n      year: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Gallery;\n","import styled from '@emotion/styled';\n\nexport const LoadMoreBtn = styled.button`\n  display: inline-block;\n  margin: auto;\n  margin-bottom: 30px;\n  background-image: linear-gradient(-180deg, #0dccea 0%, #1e96c8 100%);\n  border-radius: 0.5rem;\n  box-sizing: border-box;\n  color: #ffffff;\n  display: flex;\n  font-size: 16px;\n  justify-content: center;\n  padding: 1rem 1.75rem;\n  text-decoration: none;\n  border: 0;\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  transition: all 350ms linear;\n\n  &:hover,\n  &:focus {\n    background-image: linear-gradient(-90deg, #1e96c8 0%, #0dccea 100%);\n  }\n`;\n","import { LoadMoreBtn } from './LoadMoreBtn.styled';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onLoadMore }) => {\n  return (\n    <LoadMoreBtn type=\"button\" onClick={onLoadMore}>\n      Load more\n    </LoadMoreBtn>\n  );\n};\n\nButton.propTypes = {\n  onLoadMore: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border: 1px solid #1e96c8;\n\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchInput = styled.input`\n  margin: 0 auto;\n  width: 100%;\n  height: 30px;\n\n  padding: 0 20px;\n  font-size: 1rem;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  transition: 0.35s ease;\n  & :focus,\n  &:hover,\n  &:not(:placeholder-shown) {\n    color: #1e96c8;\n  }\n  &:hover::placeholder {\n    color: #1e96c8;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  float: right;\n  width: 48px;\n  height: 48px;\n  top: 0px;\n  right: 0px;\n  border: none;\n  background-color: transparent;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    transform: scale(1.2);\n    outline: none;\n  }\n`;\n","import { useEffect, useMemo, useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport Notiflix from 'notiflix';\nimport { getMovieByQuery, getMoviesInfo } from 'services/getMovies';\nimport Gallery from 'components/Gallery/Gallery';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { Form, SearchInput, SearchBtn } from './MoviesPage.styled';\nimport Button from 'components/LoadMoreBtn/LoadMoreBtn';\nimport PlaceholderSerch from '../NotFound/Placeholder';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const [totalPages, settTotalPages] = useState(0);\n  const [isFound, setIsFound] = useState(true);\n\n  const { query, page } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { value } = e.currentTarget.elements.query;\n    if (!value.trim()) {\n      Notiflix.Notify.failure('Sorry, incorect query. Please try again.');\n      return;\n    }\n    setSearchParams({ query: value, page: 1 });\n    // e.currentTarget.reset();\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    setIsloading(true);\n\n    getMovieByQuery(query, page)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        settTotalPages(response.data.total_pages);\n\n        //обробка результату функцією getMoviesInfo прокидання отриманого обʼєкту в функцію обробник щоб витягнути необхідні поля\n        setMovies(prevState => [\n          ...prevState,\n          ...getMoviesInfo(response.data.results),\n        ]);\n\n        setIsFound(response.data.results.length > 0);\n        // if(movies.length>0){\n        // setIsFound(true);\n        // }\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [query, page, searchParams]);\n\n  const onLoadMore = () => {\n    const prevPage = searchParams.get('page') ?? 1;\n    const query = searchParams.get('query');\n    setSearchParams({ query, page: Number(prevPage) + 1 });\n  };\n\n  console.log('---------------');\n  console.log('movies.length === 0', movies.length === 0);\n  console.log('query', query);\n  console.log('!isLoading', !isLoading);\n  console.log('---------------');\n  return (\n    <>\n      <div>\n        <h3>Movies</h3>\n        <Form onSubmit={handleSubmit}>\n          <SearchInput type=\"text\" name=\"query\" autoComplete=\"off\" autoFocus />\n          <SearchBtn type=\"submit\">\n            <FaSearch />\n          </SearchBtn>\n        </Form>\n      </div>\n      {isLoading && <Loader />}\n      {isFound && query && !isLoading ? (\n        <>\n          <Gallery movies={movies} location={location} />\n          {page < totalPages && <Button onLoadMore={onLoadMore} />}\n        </>\n      ) : (\n        <PlaceholderSerch />\n      )}\n    </>\n  );\n};\nexport default MoviesPage;\n","import styled from '@emotion/styled';\nimport img2 from './404-we-cant-find.webp';\nexport const Placeholder = styled.div`\n  color: transparent;\n  max-width: 1280px;\n  height: 100vh;\n  margin-left: auto;\n  margin-right: auto;\n  background-image: url(${img2});\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n`;\n","import { Placeholder } from './Placeholder.styled';\n\nconst PlaceholderSerch = () => {\n  return <Placeholder> Page not found</Placeholder>;\n};\nexport default PlaceholderSerch;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["require","Link","useLocation","movie","title","w300imgUrl","w500imgUrl","year","id","location","to","state","from","srcSet","sizes","src","alt","loading","movies","map","LoadMoreBtn","styled","onLoadMore","type","onClick","Form","SearchInput","SearchBtn","useState","setMovies","isLoading","setIsloading","useSearchParams","searchParams","setSearchParams","totalPages","settTotalPages","isFound","setIsFound","useMemo","Object","fromEntries","query","page","useEffect","getMovieByQuery","then","response","status","Error","data","total_pages","prevState","getMoviesInfo","results","length","catch","e","console","error","finally","log","onSubmit","preventDefault","value","currentTarget","elements","trim","Notiflix","name","autoComplete","autoFocus","Loader","Gallery","prevPage","get","Number","Placeholder","img2","BASE_URL","API_KEY","DEFAULT_IMG","getPopularMovie","pageNumber","axios","moviesArr","poster_path","release_date","slice","first_air_date","getMovieById","getCastInfo","getCastInfoObj","castArr","actor","original_name","profile_path","character","getReviews","getReviewsInfo","reviewsArr","review","author","content","getMoviesDetails","cutGenres","genres","elem","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview"],"sourceRoot":""}