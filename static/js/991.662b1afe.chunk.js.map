{"version":3,"file":"static/js/991.662b1afe.chunk.js","mappings":"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","sources":["components/Gallery/GalleryItem/GalleryItem.jsx","components/Gallery/Gallery.jsx","components/LoadMoreBtn/LoadMoreBtn.styled.jsx","components/LoadMoreBtn/LoadMoreBtn.jsx","components/pages/Home/HomePage.js","services/getMovies.js"],"sourcesContent":["import PropTypes from 'prop-types';\nconst { Link, useLocation } = require('react-router-dom');\n\nconst GalleryItem = ({\n  movie: { title, w300imgUrl, w500imgUrl, year, id },\n}) => {\n  const location = useLocation();\n  return (\n    <li>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <img\n          srcSet={`${w300imgUrl} 300w, ${w500imgUrl} 500w`}\n          sizes={'(max-width: 767px) 300px, (min-width: 768px) 500px'}\n          src={w500imgUrl}\n          alt={title}\n          loading=\"lazy\"\n        />\n        <div>\n          <p> {title}</p>\n          <p>{year}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nGalleryItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    w300imgUrl: PropTypes.string.isRequired,\n    w500imgUrl: PropTypes.string.isRequired,\n    year: PropTypes.number.isRequired,\n  }),\n};\n\nexport default GalleryItem;\n","import GalleryItem from './GalleryItem/GalleryItem';\nimport PropTypes from 'prop-types';\n\nconst Gallery = ({ movies }) => {\n  return (\n    <ul>\n      {movies &&\n        movies.map(movie => <GalleryItem key={movie.id} movie={movie} />)}\n    </ul>\n  );\n};\n\nGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      w300imgUrl: PropTypes.string.isRequired,\n      w500imgUrl: PropTypes.string.isRequired,\n      year: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Gallery;\n","import styled from '@emotion/styled';\n\nexport const LoadMoreBtn = styled.button`\n  display: inline-block;\n  margin: auto;\n  margin-bottom: 30px;\n  background-image: linear-gradient(-180deg, #0dccea 0%, #1e96c8 100%);\n  border-radius: 0.5rem;\n  box-sizing: border-box;\n  color: #ffffff;\n  display: flex;\n  font-size: 16px;\n  justify-content: center;\n  padding: 1rem 1.75rem;\n  text-decoration: none;\n  border: 0;\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  transition: all 350ms linear;\n\n  &:hover,\n  &:focus {\n    background-image: linear-gradient(-90deg, #1e96c8 0%, #0dccea 100%);\n  }\n`;\n","import { LoadMoreBtn } from './LoadMoreBtn.styled';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onLoadMore }) => {\n  return (\n    <LoadMoreBtn type=\"button\" onClick={onLoadMore}>\n      Load more\n    </LoadMoreBtn>\n  );\n};\n\nButton.propTypes = {\n  onLoadMore: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport Gallery from 'components/Gallery/Gallery';\nimport { getMoviesInfo, getPopularMovie } from 'services/getMovies';\nimport Button from 'components/LoadMoreBtn/LoadMoreBtn';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsloading] = useState(false);\n  const [totalPages, settTotalPages] = useState(0);\n  const homeLocation = useLocation();\n  useEffect(() => {\n    setIsloading(true);\n\n    getPopularMovie(page)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        settTotalPages(response.data.total_pages);\n\n        setMovies(prevState => [\n          ...prevState,\n          ...getMoviesInfo(response.data.results),\n        ]);\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [page]);\n\n  const onLoadMore = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {!isLoading && (\n        <div>\n          <h1>Trending today</h1>\n\n          {movies.length && (\n            <>\n              <Gallery movies={movies} location={homeLocation} />\n              {page < totalPages && <Button onLoadMore={onLoadMore} />}\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\nexport default HomePage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["require","Link","useLocation","movie","title","w300imgUrl","w500imgUrl","year","id","location","to","state","from","srcSet","sizes","src","alt","loading","movies","map","LoadMoreBtn","styled","onLoadMore","type","onClick","useState","setMovies","page","setPage","isLoading","setIsloading","totalPages","settTotalPages","homeLocation","useEffect","getPopularMovie","then","response","status","Error","data","total_pages","prevState","getMoviesInfo","results","catch","e","console","error","finally","length","BASE_URL","API_KEY","DEFAULT_IMG","pageNumber","axios","getMovieByQuery","query","moviesArr","name","poster_path","release_date","slice","first_air_date","getMovieById","getCastInfo","getCastInfoObj","castArr","actor","original_name","profile_path","character","getReviews","log","getReviewsInfo","reviewsArr","review","author","content","getMoviesDetails","cutGenres","genres","elem","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview"],"sourceRoot":""}