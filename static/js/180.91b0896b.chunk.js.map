{"version":3,"file":"static/js/180.91b0896b.chunk.js","mappings":"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","sources":["components/Cast/CastGallery/CastGallery.styled.jsx","components/Cast/CastGallery/CastGalleryItem/CastGalleryItem.styled.jsx","components/Cast/CastGallery/CastGalleryItem/CastGalleryItem.jsx","components/Cast/CastGallery/CastGallery.jsx","components/Cast/Cast.jsx","services/getMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastGalleryGrid = styled.ul`\n  max-width: 1280px;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 12px;\n  padding-right: 12px;\n\n  display: grid;\n  grid-template-columns: repeat(1, minmax(290px, 1fr));\n  grid-template-rows: repeat(auto-fit);\n  grid-row-gap: 10px;\n\n  @media (min-width: 768px) {\n    display: grid;\n    grid-template-columns: repeat(3, minmax(240px, 1fr));\n    grid-template-rows: repeat(auto-fit, 1fr);\n    grid-row-gap: 10px;\n    grid-column-gap: 10px;\n  }\n\n  @media (min-width: 1280px) {\n    display: grid;\n    grid-template-columns: repeat(6, minmax(196px, 1fr));\n    grid-template-rows: repeat(auto-fit, 1fr);\n    grid-template-rows: auto;\n\n    grid-column-gap: 16px;\n    grid-row-gap: 16px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const CastGalleryItemCard = styled.li`\n  cursor: pointer;\n  transition: all 250ms linear;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  height: 100%;\n  overflow: hidden;\n\n  & img {\n    display: block;\n    width: 100%;\n    height: 90%;\n    object-fit: cover;\n    @media (min-width: 768px) {\n      height: 80%;\n    }\n  }\n  & div {\n    padding: 10px;\n  }\n  & h4,\n  & p {\n    margin-bottom: 0;\n    margin-top: 5px;\n    padding: 0;\n    @media (max-width: 768px) {\n      font-size: 24px;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { CastGalleryItemCard } from './CastGalleryItem.styled';\n\nconst CastGalleryItem = ({\n  actor: { name, w300imgUrl, w500imgUrl, character },\n}) => {\n  return (\n    <CastGalleryItemCard>\n      <img\n        srcSet={`${w300imgUrl} 300w, ${w500imgUrl} 500w`}\n        sizes={'(max-width: 767px) 300px, (min-width: 768px) 500px'}\n        src={w500imgUrl}\n        alt={name}\n        loading=\"lazy\"\n      />\n      <div>\n        <h4> {name}</h4>\n        <p>{character}</p>\n      </div>\n    </CastGalleryItemCard>\n  );\n};\nCastGalleryItem.propTypes = {\n  actor: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    w300imgUrl: PropTypes.string.isRequired,\n    w500imgUrl: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CastGalleryItem;\n","import PropTypes from 'prop-types';\nimport { CastGalleryGrid } from './/CastGallery.styled';\nimport CastGalleryItem from './CastGalleryItem/CastGalleryItem';\n\nconst CastGallery = ({ cast }) => {\n  return (\n    <CastGalleryGrid>\n      {cast &&\n        cast\n          ?.slice(0, 12)\n          ?.map(actor => <CastGalleryItem key={actor.id} actor={actor} />)}\n    </CastGalleryGrid>\n  );\n};\nCastGallery.propTypes = {\n  imagcastes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      w300imgUrl: PropTypes.string.isRequired,\n      w500imgUrl: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default CastGallery;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo, getCastInfoObj } from 'services/getMovies';\nimport CastGallery from './CastGallery/CastGallery';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n\n  useEffect(() => {\n    setIsloading(true);\n\n    getCastInfo(movieId)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        setCastInfo(getCastInfoObj(response.data.cast));\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {castInfo.length ? (\n        <CastGallery cast={castInfo} />\n      ) : (\n        <h2>Oops! There is no info here...</h2>\n      )}\n    </div>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\nconst DEFAULT_AVATAR =\n  'https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      avatar_path: review.author_details.avatar_path.includes('https')\n        ? DEFAULT_AVATAR\n        : `https://www.themoviedb.org/t/p/w300_and_h300_face${review.author_details.avatar_path}`,\n      username: review.author_details.username,\n      name: review.author_details.name\n        ? review.author_details.name\n        : review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["CastGalleryGrid","styled","CastGalleryItemCard","actor","name","w300imgUrl","w500imgUrl","character","srcSet","sizes","src","alt","loading","cast","slice","map","id","movieId","useParams","useState","castInfo","setCastInfo","isLoading","setIsloading","useEffect","getCastInfo","then","response","status","Error","getCastInfoObj","data","catch","e","console","error","finally","Loader","length","BASE_URL","API_KEY","DEFAULT_IMG","getPopularMovie","pageNumber","axios","getMovieByQuery","query","getMoviesInfo","moviesArr","movie","title","poster_path","year","release_date","first_air_date","getMovieById","castArr","original_name","profile_path","getReviews","log","getReviewsInfo","reviewsArr","review","avatar_path","author_details","includes","username","author","content","getMoviesDetails","cutGenres","genres","elem","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview"],"sourceRoot":""}