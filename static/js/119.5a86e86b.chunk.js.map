{"version":3,"file":"static/js/119.5a86e86b.chunk.js","mappings":"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","sources":["components/Cast/CastGallery/CastGalleryItem/CastGalleryItem.jsx","components/Cast/CastGallery/CastGallery.jsx","components/Cast/Cast.jsx","services/getMovies.js"],"sourcesContent":["const CastGalleryItem = ({\n  actor: { name, w300imgUrl, w500imgUrl, character },\n}) => {\n  return (\n    <li>\n      <img\n        srcSet={`${w300imgUrl} 300w, ${w500imgUrl} 500w`}\n        sizes={'(max-width: 767px) 300px, (min-width: 768px) 500px'}\n        src={w500imgUrl}\n        alt={name}\n        loading=\"lazy\"\n      />\n      <div>\n        <p> {name}</p>\n        <p>{character}</p>\n      </div>\n    </li>\n  );\n};\n\nexport default CastGalleryItem;\n","import CastGalleryItem from './CastGalleryItem/CastGalleryItem';\n\nconst CastGallery = ({ cast }) => {\n  console.log('cast', cast);\n  return (\n    <ul>\n      {cast &&\n        cast.map(actor => <CastGalleryItem key={actor.id} actor={actor} />)}\n    </ul>\n  );\n};\nexport default CastGallery;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo, getCastInfoObj } from 'services/getMovies';\nimport CastGallery from './CastGallery/CastGallery';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [castInfo, setCastInfo] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n\n  useEffect(() => {\n    setIsloading(true);\n\n    getCastInfo(movieId)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        setCastInfo(getCastInfoObj(response.data.cast));\n        // console.log(castInfo);\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <CastGallery cast={castInfo} />\n    </div>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["actor","name","w300imgUrl","w500imgUrl","character","srcSet","sizes","src","alt","loading","cast","console","log","map","id","movieId","useParams","useState","castInfo","setCastInfo","isLoading","setIsloading","useEffect","getCastInfo","then","response","status","Error","getCastInfoObj","data","catch","e","error","finally","Loader","BASE_URL","API_KEY","DEFAULT_IMG","getPopularMovie","pageNumber","axios","getMovieByQuery","query","getMoviesInfo","moviesArr","movie","title","poster_path","year","release_date","slice","first_air_date","getMovieById","castArr","original_name","profile_path","getReviews","getReviewsInfo","reviewsArr","review","author","content","getMoviesDetails","cutGenres","genres","elem","length","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview"],"sourceRoot":""}