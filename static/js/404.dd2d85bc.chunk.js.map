{"version":3,"file":"static/js/404.dd2d85bc.chunk.js","mappings":"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","sources":["components/Reviews/ReviewsList/ReviewsListItem/ReviewsListItem.jsx","components/Reviews/ReviewsList/ReviewList.styled.jsx","components/Reviews/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","services/getMovies.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ReviewsListItem = ({\n  review: { avatar_path, name, username, content },\n}) => {\n  console.log(avatar_path);\n  return (\n    <li>\n      <div>\n        <img src={avatar_path} alt=\"avatar\" />\n        <h4>\n          {name}\n          <br />\n          <span>@{username}</span>\n        </h4>\n      </div>\n      <p>{content}</p>\n    </li>\n  );\n};\nReviewsListItem.propTypes = {\n  review: PropTypes.shape({\n    avatar_path: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ReviewsListItem;\n","import styled from '@emotion/styled';\n\nexport const ReviewList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin-right: 0;\n  margin-left: 0;\n\n  & li {\n    box-shadow: 2px 2px 30px rgba(0, 0, 0, 0.1);\n    background-color: #ffffff;\n    padding: 20px;\n    margin-bottom: 15px;\n    cursor: pointer;\n\n    @media (min-width: 768px) {\n    }\n    @media (min-width: 1280px) {\n    }\n\n    & img {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      overflow: hidden;\n      margin-right: 10px;\n      object-fit: cover;\n      object-position: center;\n    }\n    & div {\n      display: flex;\n    }\n    & h4 {\n      color: #1e96c8;\n      font-size: 1.1rem;\n      letter-spacing: 0.5px;\n    }\n    & span {\n      color: #979797;\n      font-size: 0.8rem;\n    }\n    & p {\n      font-size: 0.9rem;\n      color: #4b4b4b;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport ReviewsListItem from './ReviewsListItem/ReviewsListItem';\nimport { ReviewList } from './ReviewList.styled';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <ReviewList>\n      {reviews &&\n        reviews.map(review => (\n          <ReviewsListItem key={review.id} review={review} />\n        ))}\n    </ReviewList>\n  );\n};\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      avatar_path: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ReviewsList;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews, getReviewsInfo } from 'services/getMovies';\nimport ReviewsList from './ReviewsList/ReviewsList';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n\n  useEffect(() => {\n    setIsloading(true);\n\n    getReviews(movieId)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        console.log(response.data.results);\n        setReviews(getReviewsInfo(response.data.results));\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [movieId]);\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {reviews.length ? (\n        <ReviewsList reviews={reviews} />\n      ) : (\n        <h3>There is no review for this movie yet...</h3>\n      )}\n    </div>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\nconst DEFAULT_AVATAR =\n  'https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      avatar_path: review.author_details.avatar_path.includes('https')\n        ? DEFAULT_AVATAR\n        : `https://www.themoviedb.org/t/p/w300_and_h300_face${review.author_details.avatar_path}`,\n      username: review.author_details.username,\n      name: review.author_details.name\n        ? review.author_details.name\n        : review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["review","avatar_path","name","username","content","console","log","src","alt","ReviewList","styled","reviews","map","id","movieId","useParams","useState","setReviews","isLoading","setIsloading","useEffect","getReviews","then","response","status","Error","data","results","getReviewsInfo","catch","e","error","finally","Loader","length","BASE_URL","API_KEY","DEFAULT_IMG","getPopularMovie","pageNumber","axios","getMovieByQuery","query","getMoviesInfo","moviesArr","movie","title","w300imgUrl","poster_path","w500imgUrl","year","release_date","slice","first_air_date","getMovieById","getCastInfo","getCastInfoObj","castArr","actor","original_name","profile_path","character","reviewsArr","author_details","includes","author","getMoviesDetails","cutGenres","genres","elem","join","titleOriginal","original_title","popularity","vote","vote_average","votes","vote_count","about","overview"],"sourceRoot":""}