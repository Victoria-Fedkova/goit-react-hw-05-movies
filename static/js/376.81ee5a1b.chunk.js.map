{"version":3,"file":"static/js/376.81ee5a1b.chunk.js","mappings":"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","sources":["components/MovieInfo/MovieInfo.jsx","components/pages/MovieDetails/MoviesDetails.styled.jsx","components/pages/MovieDetails/MovieDetails.js","components/pages/NotFound/Placeholder.styled.jsx","components/pages/NotFound/Placeholder.jsx","services/getMovies.js"],"sourcesContent":["const MovieInfo = ({\n  movie: {\n    title,\n    titleOriginal,\n    popularity,\n    vote,\n    votes,\n    w300imgUrl,\n    w500imgUrl,\n    genres,\n    about,\n  },\n}) => {\n  return (\n    <div>\n      <img\n        srcSet={`${w300imgUrl} 300w, ${w500imgUrl} 500w`}\n        sizes=\"(max-width: 767px) 300px, (min-width: 768px) 500px\"\n        src={w500imgUrl}\n        alt={title}\n        loading=\"lazy\"\n      />\n\n      <div>\n        <strong>{title}</strong>\n        <ul>\n          <li>\n            <p>Vote / Votes</p>\n            <p>\n              <span>{vote}</span>\n              <span> / </span>\n              <span>{votes}</span>\n            </p>\n          </li>\n          <li>\n            <p>Popularity</p>\n            <p>{popularity}</p>\n          </li>\n          <li>\n            <p>Original Title</p>\n            <p>{titleOriginal}</p>\n          </li>\n          <li>\n            <p>Genre</p>\n            <p>{genres}</p>\n          </li>\n        </ul>\n        <p>About</p>\n        <p>{about}</p>\n      </div>\n    </div>\n  );\n};\nexport default MovieInfo;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const GoBackBtn = styled(Link)`\n  display: inline-block;\n\n  width: 120px;\n  margin-right: auto;\n  margin-bottom: 30px;\n  background-image: linear-gradient(-180deg, #0dccea 0%, #1e96c8 100%);\n  border-radius: 0.5rem;\n  box-sizing: border-box;\n  color: #ffffff;\n  display: flex;\n  font-size: 16px;\n  justify-content: center;\n  padding: 1rem 1.75rem;\n  text-decoration: none;\n  border: 0;\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  transition: all 350ms linear;\n\n  &:hover,\n  &:focus {\n    background-image: linear-gradient(-90deg, #1e96c8 0%, #0dccea 100%);\n  }\n`;\n","import MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieById, getMoviesDetails } from 'services/getMovies';\nimport { GoBackBtn } from './MoviesDetails.styled';\nimport Loader from 'components/Loader/Loader';\nimport PlaceholderSerch from '../NotFound/Placeholder';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [MovieDetails, setMovieDetails] = useState(null);\n  const [isLoading, setIsloading] = useState(false);\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    setIsloading(true);\n\n    getMovieById(movieId)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(`Error in request: ${response.status}`);\n        }\n        setMovieDetails(getMoviesDetails(response.data));\n      })\n      .catch(e => console.error(e))\n      .finally(() => setIsloading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Movie Details : {movieId}</h2>\n      {isLoading && <Loader />}\n      <GoBackBtn to={backLinkHref}>go Back</GoBackBtn>\n\n      {MovieDetails && !isLoading && (\n        <>\n          <MovieInfo movie={MovieDetails} />\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n          </ul>\n          <Outlet />\n        </>\n      )}\n      {!MovieDetails && !isLoading && <PlaceholderSerch />}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import styled from '@emotion/styled';\nimport img2 from './404-we-cant-find.webp';\nexport const Placeholder = styled.div`\n  color: transparent;\n  max-width: 1280px;\n  height: 100vh;\n  margin-left: auto;\n  margin-right: auto;\n  background-image: url(${img2});\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n`;\n","import { Placeholder } from './Placeholder.styled';\n\nconst PlaceholderSerch = () => {\n  return <Placeholder> Page not found</Placeholder>;\n};\nexport default PlaceholderSerch;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ae38d5c8baf36c9c4ca14e9456f3c0fd';\n//зображення що завантажиться при відсутності постеру\nconst DEFAULT_IMG =\n  'https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg';\n\n//запит до серверу, що отримує дані популярних фільмів\nexport const getPopularMovie = async pageNumber => {\n  const data = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n//запит на сервер, пошук фільмів за ключовими словами\nexport const getMovieByQuery = async (query, pageNumber) => {\n  const data = await axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${\n      pageNumber ? pageNumber : 1\n    }`\n  );\n  return data;\n};\n\n// функція обробник повернення масиву об\"єктів даних про фільми\nexport const getMoviesInfo = moviesArr => {\n  return moviesArr.map(movie => {\n    const movieInfo = {\n      title: movie.title ? movie.title : movie.name, //назва\n      w300imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      w500imgUrl: movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n      year: movie.release_date\n        ? movie.release_date.slice(0, 4)\n        : movie?.first_air_date?.slice(0, 4) || '', //рік\n      id: movie.id,\n    };\n    return movieInfo;\n  });\n};\n\n//запит, що отримує інформацію про фільм за ID\nexport const getMovieById = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n//запит на акторський склад\nexport const getCastInfo = async id => {\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getCastInfoObj = castArr => {\n  return castArr.map(actor => {\n    const castInfo = {\n      name: actor.name ? actor.name : actor.original_name,\n      w300imgUrl: actor.poster_path\n        ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n        : DEFAULT_IMG,\n      w500imgUrl: actor.profile_path\n        ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n        : DEFAULT_IMG,\n      character: actor.character,\n      id: actor.id,\n    };\n    return castInfo;\n  });\n};\n\nexport const getReviews = async id => {\n  console.log(id);\n  const data = await axios(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\nexport const getReviewsInfo = reviewsArr => {\n  return reviewsArr.map(review => {\n    const reviewInfo = {\n      author: review.author,\n      content: review.content,\n      id: review.id,\n    };\n    return reviewInfo;\n  });\n};\n\n// функція обробник повертає об\"єкт з детальною інформацією по фільму, в інших файлах не використовується\nexport const getMoviesDetails = movie => {\n  let genres = movie.genres.map(elem => elem.name);\n  let cutGenres;\n  if (genres.length === 0) {\n    cutGenres = 'Other';\n  } else if (genres.length <= 2) {\n    cutGenres = genres.join(', ');\n  } else {\n    cutGenres = `${genres.slice(0, 2).join(', ')}, Other`;\n  }\n  return {\n    title: movie.title ? movie.title : movie.name, //назва\n    titleOriginal: movie.original_title, // оригінальна назва\n    popularity: movie.popularity, //популярність\n    vote: movie.vote_average, // середній рейтинг\n    votes: movie.vote_count, // кількість голосів\n    w300imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    w500imgUrl: movie.poster_path\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n      : DEFAULT_IMG, // постер, або дефолтна картинка за відсутності постера\n    genres: cutGenres, // жанри\n    about: movie.overview,\n    year: movie.release_date\n      ? movie.release_date.slice(0, 4)\n      : movie?.first_air_date?.slice(0, 4) || '',\n  };\n};\n"],"names":["movie","title","titleOriginal","popularity","vote","votes","w300imgUrl","w500imgUrl","genres","about","srcSet","sizes","src","alt","loading","GoBackBtn","styled","Link","movieId","useParams","useState","MovieDetails","setMovieDetails","isLoading","setIsloading","backLinkHref","useLocation","state","from","useEffect","getMovieById","then","response","status","Error","getMoviesDetails","data","catch","e","console","error","finally","Loader","to","Placeholder","img2","BASE_URL","API_KEY","DEFAULT_IMG","getPopularMovie","pageNumber","axios","getMovieByQuery","query","getMoviesInfo","moviesArr","map","name","poster_path","year","release_date","slice","first_air_date","id","getCastInfo","getCastInfoObj","castArr","actor","original_name","profile_path","character","getReviews","log","getReviewsInfo","reviewsArr","review","author","content","cutGenres","elem","length","join","original_title","vote_average","vote_count","overview"],"sourceRoot":""}